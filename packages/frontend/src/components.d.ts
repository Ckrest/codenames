/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BoardData, Color, GameData, Mode, PlayerData, Scores, Server } from "./extra/types";
export namespace Components {
    interface CodenamesApp {
    }
    interface CodenamesBoard {
        /**
          * Board data used to generate the cells.
         */
        "boardData"?: BoardData;
        /**
          * Whether it is currently the user's turn to guess.
         */
        "canGuess": boolean;
        /**
          * Library of server utilities.
         */
        "server": Server;
    }
    interface CodenamesButton {
        /**
          * Button color.
         */
        "color"?: Color;
        /**
          * Whether button is on.
         */
        "on"?: boolean;
    }
    interface CodenamesCell {
        /**
          * Whether it is currently the user's turn to guess.
         */
        "canGuess": boolean;
        /**
          * Cell color.
         */
        "color"?: Color;
        /**
          * Index of the cell.
         */
        "index": number;
        /**
          * Whether cell is currently loading.
         */
        "loading"?: boolean;
        /**
          * Cell display mode.
         */
        "mode"?: Mode;
        /**
          * Whether the cell is revealed.
         */
        "revealed"?: boolean;
        /**
          * Library of server utilities.
         */
        "server": Server;
        /**
          * Word shown in cell.
         */
        "word": string;
    }
    interface CodenamesGame {
        /**
          * Game data used to populate values on the board and UI.
         */
        "gameData"?: GameData;
        /**
          * Library of server utilities.
         */
        "server": Server;
        /**
          * Player data for the user.
         */
        "userPlayer"?: PlayerData;
    }
    interface CodenamesLandingPage {
        /**
          * Room code currently entered.
         */
        "roomCode"?: string;
        /**
          * Library of server utilities.
         */
        "server": Server;
        /**
          * Username currently entered.
         */
        "username"?: string;
    }
    interface CodenamesPanel {
        /**
          * Library of server utilities.
         */
        "panelTeam": Color;
        /**
          * All players in the game.
         */
        "players"?: PlayerData[];
        /**
          * Library of server utilities.
         */
        "server": Server;
    }
    interface CodenamesScores {
        /**
          * Scores to display.
         */
        "scores"?: Scores;
        /**
          * Team whose turn it is.
         */
        "turn"?: Color;
    }
    interface CodenamesSpinner {
    }
}
declare global {
    interface HTMLCodenamesAppElement extends Components.CodenamesApp, HTMLStencilElement {
    }
    var HTMLCodenamesAppElement: {
        prototype: HTMLCodenamesAppElement;
        new (): HTMLCodenamesAppElement;
    };
    interface HTMLCodenamesBoardElement extends Components.CodenamesBoard, HTMLStencilElement {
    }
    var HTMLCodenamesBoardElement: {
        prototype: HTMLCodenamesBoardElement;
        new (): HTMLCodenamesBoardElement;
    };
    interface HTMLCodenamesButtonElement extends Components.CodenamesButton, HTMLStencilElement {
    }
    var HTMLCodenamesButtonElement: {
        prototype: HTMLCodenamesButtonElement;
        new (): HTMLCodenamesButtonElement;
    };
    interface HTMLCodenamesCellElement extends Components.CodenamesCell, HTMLStencilElement {
    }
    var HTMLCodenamesCellElement: {
        prototype: HTMLCodenamesCellElement;
        new (): HTMLCodenamesCellElement;
    };
    interface HTMLCodenamesGameElement extends Components.CodenamesGame, HTMLStencilElement {
    }
    var HTMLCodenamesGameElement: {
        prototype: HTMLCodenamesGameElement;
        new (): HTMLCodenamesGameElement;
    };
    interface HTMLCodenamesLandingPageElement extends Components.CodenamesLandingPage, HTMLStencilElement {
    }
    var HTMLCodenamesLandingPageElement: {
        prototype: HTMLCodenamesLandingPageElement;
        new (): HTMLCodenamesLandingPageElement;
    };
    interface HTMLCodenamesPanelElement extends Components.CodenamesPanel, HTMLStencilElement {
    }
    var HTMLCodenamesPanelElement: {
        prototype: HTMLCodenamesPanelElement;
        new (): HTMLCodenamesPanelElement;
    };
    interface HTMLCodenamesScoresElement extends Components.CodenamesScores, HTMLStencilElement {
    }
    var HTMLCodenamesScoresElement: {
        prototype: HTMLCodenamesScoresElement;
        new (): HTMLCodenamesScoresElement;
    };
    interface HTMLCodenamesSpinnerElement extends Components.CodenamesSpinner, HTMLStencilElement {
    }
    var HTMLCodenamesSpinnerElement: {
        prototype: HTMLCodenamesSpinnerElement;
        new (): HTMLCodenamesSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "codenames-app": HTMLCodenamesAppElement;
        "codenames-board": HTMLCodenamesBoardElement;
        "codenames-button": HTMLCodenamesButtonElement;
        "codenames-cell": HTMLCodenamesCellElement;
        "codenames-game": HTMLCodenamesGameElement;
        "codenames-landing-page": HTMLCodenamesLandingPageElement;
        "codenames-panel": HTMLCodenamesPanelElement;
        "codenames-scores": HTMLCodenamesScoresElement;
        "codenames-spinner": HTMLCodenamesSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface CodenamesApp {
    }
    interface CodenamesBoard {
        /**
          * Board data used to generate the cells.
         */
        "boardData"?: BoardData;
        /**
          * Whether it is currently the user's turn to guess.
         */
        "canGuess"?: boolean;
        /**
          * Library of server utilities.
         */
        "server"?: Server;
    }
    interface CodenamesButton {
        /**
          * Button color.
         */
        "color"?: Color;
        /**
          * Whether button is on.
         */
        "on"?: boolean;
    }
    interface CodenamesCell {
        /**
          * Whether it is currently the user's turn to guess.
         */
        "canGuess"?: boolean;
        /**
          * Cell color.
         */
        "color"?: Color;
        /**
          * Index of the cell.
         */
        "index"?: number;
        /**
          * Whether cell is currently loading.
         */
        "loading"?: boolean;
        /**
          * Cell display mode.
         */
        "mode"?: Mode;
        /**
          * Whether the cell is revealed.
         */
        "revealed"?: boolean;
        /**
          * Library of server utilities.
         */
        "server"?: Server;
        /**
          * Word shown in cell.
         */
        "word"?: string;
    }
    interface CodenamesGame {
        /**
          * Game data used to populate values on the board and UI.
         */
        "gameData"?: GameData;
        /**
          * Library of server utilities.
         */
        "server"?: Server;
        /**
          * Player data for the user.
         */
        "userPlayer"?: PlayerData;
    }
    interface CodenamesLandingPage {
        /**
          * Room code currently entered.
         */
        "roomCode"?: string;
        /**
          * Library of server utilities.
         */
        "server"?: Server;
        /**
          * Username currently entered.
         */
        "username"?: string;
    }
    interface CodenamesPanel {
        /**
          * Library of server utilities.
         */
        "panelTeam"?: Color;
        /**
          * All players in the game.
         */
        "players"?: PlayerData[];
        /**
          * Library of server utilities.
         */
        "server"?: Server;
    }
    interface CodenamesScores {
        /**
          * Scores to display.
         */
        "scores"?: Scores;
        /**
          * Team whose turn it is.
         */
        "turn"?: Color;
    }
    interface CodenamesSpinner {
    }
    interface IntrinsicElements {
        "codenames-app": CodenamesApp;
        "codenames-board": CodenamesBoard;
        "codenames-button": CodenamesButton;
        "codenames-cell": CodenamesCell;
        "codenames-game": CodenamesGame;
        "codenames-landing-page": CodenamesLandingPage;
        "codenames-panel": CodenamesPanel;
        "codenames-scores": CodenamesScores;
        "codenames-spinner": CodenamesSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "codenames-app": LocalJSX.CodenamesApp & JSXBase.HTMLAttributes<HTMLCodenamesAppElement>;
            "codenames-board": LocalJSX.CodenamesBoard & JSXBase.HTMLAttributes<HTMLCodenamesBoardElement>;
            "codenames-button": LocalJSX.CodenamesButton & JSXBase.HTMLAttributes<HTMLCodenamesButtonElement>;
            "codenames-cell": LocalJSX.CodenamesCell & JSXBase.HTMLAttributes<HTMLCodenamesCellElement>;
            "codenames-game": LocalJSX.CodenamesGame & JSXBase.HTMLAttributes<HTMLCodenamesGameElement>;
            "codenames-landing-page": LocalJSX.CodenamesLandingPage & JSXBase.HTMLAttributes<HTMLCodenamesLandingPageElement>;
            "codenames-panel": LocalJSX.CodenamesPanel & JSXBase.HTMLAttributes<HTMLCodenamesPanelElement>;
            "codenames-scores": LocalJSX.CodenamesScores & JSXBase.HTMLAttributes<HTMLCodenamesScoresElement>;
            "codenames-spinner": LocalJSX.CodenamesSpinner & JSXBase.HTMLAttributes<HTMLCodenamesSpinnerElement>;
        }
    }
}
