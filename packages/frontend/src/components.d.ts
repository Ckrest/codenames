/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BoardData, Color, Mode, Scores } from "./extra/types";
export namespace Components {
    interface CodenamesApp {
    }
    interface CodenamesBoard {
        /**
          * Board data used to generate the cells.
         */
        "boardData"?: BoardData;
    }
    interface CodenamesCell {
        /**
          * Cell color.
         */
        "color"?: Color;
        /**
          * Index of the cell.
         */
        "index": number;
        /**
          * Cell display mode.
         */
        "mode"?: Mode;
        /**
          * Whether the cell is revealed.
         */
        "revealed"?: boolean;
        /**
          * Word shown in cell.
         */
        "word": string;
    }
    interface CodenamesScores {
        /**
          * Scores to display.
         */
        "scores"?: Scores;
    }
    interface CodenamesSpinner {
    }
}
export interface CodenamesCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCodenamesCellElement;
}
declare global {
    interface HTMLCodenamesAppElement extends Components.CodenamesApp, HTMLStencilElement {
    }
    var HTMLCodenamesAppElement: {
        prototype: HTMLCodenamesAppElement;
        new (): HTMLCodenamesAppElement;
    };
    interface HTMLCodenamesBoardElement extends Components.CodenamesBoard, HTMLStencilElement {
    }
    var HTMLCodenamesBoardElement: {
        prototype: HTMLCodenamesBoardElement;
        new (): HTMLCodenamesBoardElement;
    };
    interface HTMLCodenamesCellElement extends Components.CodenamesCell, HTMLStencilElement {
    }
    var HTMLCodenamesCellElement: {
        prototype: HTMLCodenamesCellElement;
        new (): HTMLCodenamesCellElement;
    };
    interface HTMLCodenamesScoresElement extends Components.CodenamesScores, HTMLStencilElement {
    }
    var HTMLCodenamesScoresElement: {
        prototype: HTMLCodenamesScoresElement;
        new (): HTMLCodenamesScoresElement;
    };
    interface HTMLCodenamesSpinnerElement extends Components.CodenamesSpinner, HTMLStencilElement {
    }
    var HTMLCodenamesSpinnerElement: {
        prototype: HTMLCodenamesSpinnerElement;
        new (): HTMLCodenamesSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "codenames-app": HTMLCodenamesAppElement;
        "codenames-board": HTMLCodenamesBoardElement;
        "codenames-cell": HTMLCodenamesCellElement;
        "codenames-scores": HTMLCodenamesScoresElement;
        "codenames-spinner": HTMLCodenamesSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface CodenamesApp {
    }
    interface CodenamesBoard {
        /**
          * Board data used to generate the cells.
         */
        "boardData"?: BoardData;
    }
    interface CodenamesCell {
        /**
          * Cell color.
         */
        "color"?: Color;
        /**
          * Index of the cell.
         */
        "index"?: number;
        /**
          * Cell display mode.
         */
        "mode"?: Mode;
        /**
          * Event fired upon clicking a cell to reveal it.
         */
        "onRevealCell"?: (event: CodenamesCellCustomEvent<number>) => void;
        /**
          * Whether the cell is revealed.
         */
        "revealed"?: boolean;
        /**
          * Word shown in cell.
         */
        "word"?: string;
    }
    interface CodenamesScores {
        /**
          * Scores to display.
         */
        "scores"?: Scores;
    }
    interface CodenamesSpinner {
    }
    interface IntrinsicElements {
        "codenames-app": CodenamesApp;
        "codenames-board": CodenamesBoard;
        "codenames-cell": CodenamesCell;
        "codenames-scores": CodenamesScores;
        "codenames-spinner": CodenamesSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "codenames-app": LocalJSX.CodenamesApp & JSXBase.HTMLAttributes<HTMLCodenamesAppElement>;
            "codenames-board": LocalJSX.CodenamesBoard & JSXBase.HTMLAttributes<HTMLCodenamesBoardElement>;
            "codenames-cell": LocalJSX.CodenamesCell & JSXBase.HTMLAttributes<HTMLCodenamesCellElement>;
            "codenames-scores": LocalJSX.CodenamesScores & JSXBase.HTMLAttributes<HTMLCodenamesScoresElement>;
            "codenames-spinner": LocalJSX.CodenamesSpinner & JSXBase.HTMLAttributes<HTMLCodenamesSpinnerElement>;
        }
    }
}
